{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // SPDX-License-Identifier: MIT\
\
pragma solidity >=0.6.2;\
\
import "IERC20.sol";\
import "IUniswapV2Router.sol";\
\
contract swaps\{\
    \
    address  sushirouter = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\
    IUniswapV2Router01 Router = IUniswapV2Router01(sushirouter);\
    \
    function swapExactTokensForTokens(\
        uint amountIn,\
        uint amountOutMin,\
        address[] calldata path,\
        uint deadline\
    ) external returns (uint[] memory amounts)\{\
        IERC20 tokenA  = IERC20(path[0]);\
\
        tokenA.transferFrom(msg.sender,address(this),amountIn);\
\
        tokenA.approve(sushirouter,amountIn);\
\
       amounts = Router.swapExactTokensForTokens(amountIn,amountOutMin,path,msg.sender,deadline);\
    \}\
\
        \
        \
        \
    \}\
    \
}